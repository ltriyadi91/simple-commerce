generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  name        String
  role        Role     @default(CUSTOMER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  @default("system")
  updatedBy   String?
  updatedById Int?
  Cart        Cart?
  Order       Order[]
}

model Product {
  id          Int         @id @default(autoincrement())
  title       String
  sku         String      @unique
  description String
  quantity    Int
  price       Float
  discount    Float?      @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?     @default("system")
  updatedBy   String?
  images      Image[]
  CartItem    CartItem[]
  OrderItem   OrderItem[]
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?  @default("system")
  updatedBy String?
}

model Cart {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  createdBy String?    @default("system")
  updatedBy String?
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  cartId    Int
  productId Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?  @default("system")
  updatedBy String?
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?     @default("system")
  updatedBy   String?
  status      OrderStatus @default(UNPAID)
  discount    Float?
  finalAmount Float
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?  @default("system")
  updatedBy String?
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  UNPAID
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
