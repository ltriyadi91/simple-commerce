openapi: 3.0.3
info:
  title: E-commerce API
  description: API documentation  for E-commerce app
  version: 1.0.0
# servers:
#   - url: http://localhost:5000/api
tags:
  - name: users
    description: Operations for user
  - name: products
    description: Operations for product
  - name: orders
    description: Operations for order
  - name: carts
    description: Operations for cart
  - name: admin-users
    description: Operations for user - Admin
  - name: admin-products
    description: Operations for product - Admin
  - name: admin-orders
    description: Operations for order - Admin

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      required:
        - name
        - description
        - price
      properties:
        title:
          type: string
          description: the name of the product
          example: product name
        description:
          type: string
          description: description of the product
          example: this is the description of the product
        price:
          type: number
          format: float
          description: the price of the product
          example: "120000"
        quantity:
          type: integer
          description: the quantity of the product in quantity
          example: "20"
        discount:
          type: number
          description: product discount amount
          example: "20"
    AuthMerchant:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: the email of the user
          example: "triyadilukman@gmail.com"
        password:
          type: string
          description: password
          example: adminPassword1234
    AuthCustomer:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: the email of the user
          example: "triyadilukman92@gmail.com"
        password:
          type: string
          description: password
          example: customerPassword1234
    Register:
      type: object
      required:
        - email
        - password
        - name
      properties:
        name:
          type: string
          description: the name of the user
          example: Lukman
        email:
          type: string
          description: the email of the user
          example: "triyadilukman@gmail.com"
        password:
          type: string
          description: the price of the product
          example: customerPassword1234

    Cart:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: integer
          description: the id of the product
          example: "5"
        quantity:
          type: integer
          description: the quantity of the product
          example: "2"

paths:
  /api/v1/merchant/products:
    post:
      tags:
        - admin-products
      summary: Create a new product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: Server error
    get:
      tags:
        - admin-products
      summary: Get all the products for merchant
      security:
        - BearerAuth: []
      parameters:
        - name: title
          in: query
          description: Name of the product
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          description: Min price of the product
          required: false
          schema:
            type: string
        - name: maxPrice
          in: query
          description: Max price of the product
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sort of the product
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Page size
          required: false
          schema:
            type: string

      responses:
        "200":
          description: Product fetch successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: Server error

  /api/v1/merchant/products/file:
    post:
      tags:
        - admin-products
      summary: Upload multiple product images
      security:
        - BearerAuth: []
      consumes:
        - multipart/form-data
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload
              required:
                - image
      responses:
        "200":
          description: Image uploaded successfully
        "400":
          description: Invalid file format or missing file
        "401":
          description: Unauthorized
        "500":
          description: Server error

  /api/v1/merchant/products/image:
    post:
      tags:
        - admin-products
      summary: Get product image
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - key
              properties:
                key:
                  type: string
                  description: Key of the image
                  example: "image-123.jpg"
      responses:
        "200":
          description: Image fetched successfully

  /api/v1/merchant/products/{id}:
    get:
      tags:
        - admin-products
      summary: Get a product by id
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product fetch successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: Server error
    put:
      tags:
        - admin-products
      summary: Update a product
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: Server error
    delete:
      tags:
        - admin-products
      summary: Delete a product
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: Server error

  /api/v1/customer/products:
    get:
      tags:
        - products
      summary: Get all the products
      parameters:
        - name: title
          in: query
          description: Name of the product
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          description: Min price of the product
          required: false
          schema:
            type: string
        - name: maxPrice
          in: query
          description: Max price of the product
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sort of the product
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Page size
          required: false
          schema:
            type: string

      responses:
        "200":
          description: Product fetch successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: Server error

  /api/v1/customer/products/{id}:
    get:
      tags:
        - products
      summary: Get a product by id
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product fetch successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: Server error

  /api/v1/customer/users/register:
    post:
      tags:
        - users
      summary: Register a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
      responses:
        "201":
          description: User registered successfully
        "500":
          description: Server error

  /api/v1/customer/users/login:
    post:
      tags:
        - users
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthCustomer"
      responses:
        "200":
          description: User login successfully
        "500":
          description: Server error

  /api/v1/customer/users/profile:
    get:
      tags:
        - users
      summary: Get the info of the logged in user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Get user info successfully
        "500":
          description: Server error

  /api/v1/merchant/users/login:
    post:
      tags:
        - admin-users
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthMerchant"
      responses:
        "200":
          description: User login successfully
        "500":
          description: Server error

  /api/v1/merchant/users/profile:
    get:
      tags:
        - admin-users
      summary: Get the info of the logged in user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Get user info successfully
        "500":
          description: Server error
          
  /api/v1/customer/cart/add:
    post:
      tags:
        - carts
      summary: Create a cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      security:
        - BearerAuth: []
      responses:
        "201":
          description: Cart created successfully
        "500":
          description: Server error

  /api/v1/customer/cart:
    get:
      tags:
        - carts
      summary: Get cart of the logged in user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Cart fetched successfully
        "500":
          description: Server error

  /api/v1/customer/cart/update/{itemId}:
    put:
      tags:
        - carts
      summary: Update cart items of the logged in user
      parameters:
        - name: itemId
          in: path
          description: Id of the cart item
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                quantity:
                  type: integer
                  description: the quantity of the product
                  example: "2"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Cart updated successfully
        "500":
          description: Server error

  /api/v1/customer/cart/remove/{itemId}:
    delete:
      tags:
        - carts
      summary: Delete a cart item from cart
      parameters:
        - name: itemId
          in: path
          description: Id of the cart item
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Cart item deleted successfully
        "500":
          description: Server error

  /api/v1/customer/cart/clear:
    delete:
      tags:
        - carts
      summary: Clear all cart items from a cart
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Cart item cleared successfully
        "500":
          description: Server error

  /api/v1/customer/orders:
    post:
      tags:
        - orders
      summary: Place an order
      security:
        - BearerAuth: []
      responses:
        "201":
          description: Order placed successfully
        "500":
          description: Server error
    get:
      tags:
        - orders
      summary: Get orders of logged in user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Orders fetched successfully
        "500":
          description: Server error

  /api/v1/customer/orders/{id}:
    get:
      tags:
        - orders
      summary: Get an order of logged in user by id
      parameters:
        - name: id
          in: path
          description: Id of the order
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Order fetched successfully
        "500":
          description: Server error

  /api/v1/merchant/orders:
    get:
      tags:
        - admin-orders
      summary: Get all orders
      parameters:
        - name: userId
          in: query
          description: User of the order
          required: false
          schema:
            type: integer
        - name: status
          in: query
          description: Status of the order
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Page size
          required: false
          schema:
            type: string

      security:
        - BearerAuth: []
      responses:
        "200":
          description: Orders fetched successfully
        "500":
          description: Server error

  /api/v1/merchant/orders/{id}:
    get:
      tags:
        - admin-orders
      summary: Get an order by id
      parameters:
        - name: id
          in: path
          description: Id of the order
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Order fetched successfully
        "500":
          description: Server error

  /api/v1/merchant/orders/{id}/status:
    put:
      tags:
        - admin-orders
      summary: Update the order status
      parameters:
        - name: id
          in: path
          description: Id of the order
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  description: the status of the order
                  example: "UNPAID"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Order fetched successfully
        "500":
          description: Server error